{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/Logo/brain.jpg","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","registerServiceWorker.js","index.js"],"names":["FaceRecognition","imageUrl","box","className","alt","id","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Navigation","display","justifyContent","Logo","options","max","brain","borderRadius","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","Rank","app","Clarifai","App","apiKey","calculateface","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","left_col","top_row","right_col","bottom_row","DisplayBox","boxs","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","fpsLimit","interactivity","events","onHover","enable","mode","resize","particles","color","links","distance","opacity","collisions","move","direction","outMode","random","speed","straight","number","density","area","shape","size","detectRetina","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.832e5815.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ({imageUrl, box}) => {\r\n    if(imageUrl !== ''){\r\n    return(\r\n        <div className='center'>\r\n            <div className='absolute ma2'>\r\n                    <img \r\n                        alt='pic' \r\n                        id='inputimage' \r\n                        src={imageUrl} \r\n                        width='500px' height='auto' \r\n                    />\r\n                    <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol }}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n    return(\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = () =>{\r\n    return(\r\n        <nav style={{display:'flex', justifyContent: 'flex-end' }}>\r\n            <p className='f3 link dim underline black pa3 pointer'>Sign out</p>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","export default __webpack_public_path__ + \"static/media/brain.eea55d5b.jpg\";","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brain from './brain.jpg'\r\n\r\nconst Logo = () =>{\r\n    return(\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt\" options={{ max : 55 }} style={{ height: 120, width: 120 }} >\r\n                <div className=\"Tilt-inner pa0.5\"> \r\n                    <img src={brain} alt='logo' style={{borderRadius:'10px'}}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) =>{\r\n    return(\r\n        <div>\r\n            <p className='f4'>\r\n                {'This magic brain will detect faces in your picture, just give it a try...'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 ma4 br3 shadow-5'>\r\n                    <input className='f4 pa2 center w-70' type='text'\r\n                        onChange={onInputChange}\r\n                    />\r\n                    <button className='w-30 grow center f4 link ph3 pv2 white bg-light-purple pointer'\r\n                    onClick={onButtonSubmit}\r\n                    >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () =>{\r\n    return(\r\n        <div>\r\n        <div className='white f4'>\r\n            {'Hey User, your current rank is....'}\r\n        </div>\r\n        <div className='f2 white'>\r\n            {'#5'}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React, { Component } from 'react';\r\nimport Particles from \"react-tsparticles\";\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\n//You must add your own API key here from Clarifai.\r\nconst app = new Clarifai.App({\r\n apiKey: '96f590ed948648ea937b13471d0b4898'\r\n});\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: {},\r\n    }\r\n  }\r\n  \r\n  calculateface = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = image.width;\r\n    const height = image.height;\r\n    // console.log(width, height);\r\n    return({\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    });\r\n  }\r\n\r\n  DisplayBox = (boxs) => {\r\n    this.setState({box: boxs});\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models\r\n      .predict(\r\n        Clarifai.FACE_DETECT_MODEL,\r\n        this.state.input)\r\n      .then(response => this.DisplayBox(this.calculateface(response))\r\n        .catch(err => console.log(err)))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n      <Particles\r\n                id=\"tsparticles\"\r\n                options={{\r\n                  fpsLimit: 120,\r\n                  interactivity: {\r\n                    events: {\r\n                      onHover: {\r\n                        enable: true,\r\n                        mode: \"repulse\",\r\n                      },\r\n                      resize: true,\r\n                    }\r\n                  },\r\n                  particles: {\r\n                    color: {\r\n                      value: \"#ffffff\",\r\n                    },\r\n                    links: {\r\n                      color: \"#ffffff\",\r\n                      distance: 150,\r\n                      enable: true,\r\n                      opacity: 0.5,\r\n                      width: 1,\r\n                    },\r\n                    collisions: {\r\n                      enable: true,\r\n                    },\r\n                    move: {\r\n                      direction: \"none\",\r\n                      enable: true,\r\n                      outMode: \"bounce\",\r\n                      random: false,\r\n                      speed: 2,\r\n                      straight: false,\r\n                    },\r\n                    number: {\r\n                      density: {\r\n                        enable: true,\r\n                        area: 800,\r\n                      },\r\n                      value: 35,\r\n                    },\r\n                    opacity: {\r\n                      value: 0.5,\r\n                    },\r\n                    shape: {\r\n                      type: \"circle\",\r\n                    },\r\n                    size: {\r\n                      random: true,\r\n                      value: 5,\r\n                    },\r\n                  },\r\n                  detectRetina: true,\r\n                }}\r\n              />  \r\n\r\n        <Navigation />\r\n              <Logo />\r\n              <Rank />\r\n              <ImageLinkForm\r\n                onInputChange={this.onInputChange}\r\n                onButtonSubmit={this.onButtonSubmit}\r\n              />\r\n              <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}